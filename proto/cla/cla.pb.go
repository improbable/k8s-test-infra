// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cla.proto

package improbable_cla

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Request to get the signed CLA for a given username
type GetSignedCLARequest struct {
	GithubUsername       string   `protobuf:"bytes,1,opt,name=githubUsername,proto3" json:"githubUsername,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSignedCLARequest) Reset()         { *m = GetSignedCLARequest{} }
func (m *GetSignedCLARequest) String() string { return proto.CompactTextString(m) }
func (*GetSignedCLARequest) ProtoMessage()    {}
func (*GetSignedCLARequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf9d71f3a19c2e4a, []int{0}
}

func (m *GetSignedCLARequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSignedCLARequest.Unmarshal(m, b)
}
func (m *GetSignedCLARequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSignedCLARequest.Marshal(b, m, deterministic)
}
func (m *GetSignedCLARequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSignedCLARequest.Merge(m, src)
}
func (m *GetSignedCLARequest) XXX_Size() int {
	return xxx_messageInfo_GetSignedCLARequest.Size(m)
}
func (m *GetSignedCLARequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSignedCLARequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSignedCLARequest proto.InternalMessageInfo

func (m *GetSignedCLARequest) GetGithubUsername() string {
	if m != nil {
		return m.GithubUsername
	}
	return ""
}

// Response containing whether or not the user has signed the CLA
type GetSignedCLAResponse struct {
	HasSignedImprobableCLA bool     `protobuf:"varint,1,opt,name=hasSignedImprobableCLA,proto3" json:"hasSignedImprobableCLA,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *GetSignedCLAResponse) Reset()         { *m = GetSignedCLAResponse{} }
func (m *GetSignedCLAResponse) String() string { return proto.CompactTextString(m) }
func (*GetSignedCLAResponse) ProtoMessage()    {}
func (*GetSignedCLAResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf9d71f3a19c2e4a, []int{1}
}

func (m *GetSignedCLAResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSignedCLAResponse.Unmarshal(m, b)
}
func (m *GetSignedCLAResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSignedCLAResponse.Marshal(b, m, deterministic)
}
func (m *GetSignedCLAResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSignedCLAResponse.Merge(m, src)
}
func (m *GetSignedCLAResponse) XXX_Size() int {
	return xxx_messageInfo_GetSignedCLAResponse.Size(m)
}
func (m *GetSignedCLAResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSignedCLAResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSignedCLAResponse proto.InternalMessageInfo

func (m *GetSignedCLAResponse) GetHasSignedImprobableCLA() bool {
	if m != nil {
		return m.HasSignedImprobableCLA
	}
	return false
}

func init() {
	proto.RegisterType((*GetSignedCLARequest)(nil), "improbable.cla.GetSignedCLARequest")
	proto.RegisterType((*GetSignedCLAResponse)(nil), "improbable.cla.GetSignedCLAResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CLAServiceClient is the client API for CLAService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CLAServiceClient interface {
	GetSignedCLA(ctx context.Context, in *GetSignedCLARequest, opts ...grpc.CallOption) (*GetSignedCLAResponse, error)
}

type cLAServiceClient struct {
	cc *grpc.ClientConn
}

func NewCLAServiceClient(cc *grpc.ClientConn) CLAServiceClient {
	return &cLAServiceClient{cc}
}

func (c *cLAServiceClient) GetSignedCLA(ctx context.Context, in *GetSignedCLARequest, opts ...grpc.CallOption) (*GetSignedCLAResponse, error) {
	out := new(GetSignedCLAResponse)
	err := c.cc.Invoke(ctx, "/improbable.cla.CLAService/GetSignedCLA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CLAServiceServer is the server API for CLAService service.
type CLAServiceServer interface {
	GetSignedCLA(context.Context, *GetSignedCLARequest) (*GetSignedCLAResponse, error)
}

func RegisterCLAServiceServer(s *grpc.Server, srv CLAServiceServer) {
	s.RegisterService(&_CLAService_serviceDesc, srv)
}

func _CLAService_GetSignedCLA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSignedCLARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLAServiceServer).GetSignedCLA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.cla.CLAService/GetSignedCLA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLAServiceServer).GetSignedCLA(ctx, req.(*GetSignedCLARequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CLAService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "improbable.cla.CLAService",
	HandlerType: (*CLAServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSignedCLA",
			Handler:    _CLAService_GetSignedCLA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cla.proto",
}

func init() { proto.RegisterFile("cla.proto", fileDescriptor_cf9d71f3a19c2e4a) }

var fileDescriptor_cf9d71f3a19c2e4a = []byte{
	// 175 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0xce, 0x49, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xcb, 0xcc, 0x2d, 0x28, 0xca, 0x4f, 0x4a, 0x4c, 0xca,
	0x49, 0xd5, 0x4b, 0xce, 0x49, 0x54, 0xb2, 0xe5, 0x12, 0x76, 0x4f, 0x2d, 0x09, 0xce, 0x4c, 0xcf,
	0x4b, 0x4d, 0x71, 0xf6, 0x71, 0x0c, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x52, 0xe3, 0xe2,
	0x4b, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0x0a, 0x2d, 0x4e, 0x2d, 0xca, 0x4b, 0xcc, 0x4d, 0x95, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x42, 0x13, 0x55, 0xf2, 0xe3, 0x12, 0x41, 0xd5, 0x5e, 0x5c, 0x90,
	0x9f, 0x57, 0x9c, 0x2a, 0x64, 0xc6, 0x25, 0x96, 0x91, 0x58, 0x0c, 0x11, 0xf7, 0x84, 0xdb, 0xe8,
	0xec, 0xe3, 0x08, 0x36, 0x87, 0x23, 0x08, 0x87, 0xac, 0x51, 0x3a, 0x17, 0x97, 0xb3, 0x8f, 0x63,
	0x70, 0x6a, 0x51, 0x59, 0x66, 0x72, 0xaa, 0x50, 0x24, 0x17, 0x0f, 0xb2, 0xe9, 0x42, 0xca, 0x7a,
	0xa8, 0xae, 0xd7, 0xc3, 0xe2, 0x74, 0x29, 0x15, 0xfc, 0x8a, 0x20, 0x0e, 0x4c, 0x62, 0x03, 0x07,
	0x87, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xd0, 0x1e, 0x8b, 0xc4, 0x1b, 0x01, 0x00, 0x00,
}
